{
  "_args": [
    [
      {
        "raw": "draftlog@^1.0.10",
        "scope": null,
        "escapedName": "draftlog",
        "name": "draftlog",
        "rawSpec": "^1.0.10",
        "spec": ">=1.0.10 <2.0.0",
        "type": "range"
      },
      "/Users/Jeff_Deng/work/ysg-project/node_modules/vux-loader"
    ]
  ],
  "_cnpm_publish_time": 1489512960399,
  "_from": "draftlog@^1.0.10",
  "_hasShrinkwrap": false,
  "_id": "draftlog@1.0.12",
  "_location": "/draftlog",
  "_nodeVersion": "6.9.1",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/draftlog-1.0.12.tgz_1489512959796_0.7614506196696311"
  },
  "_npmUser": {
    "name": "ivanseidel",
    "email": "ivanseidel@gmail.com"
  },
  "_npmVersion": "3.10.8",
  "_phantomChildren": {},
  "_requested": {
    "raw": "draftlog@^1.0.10",
    "scope": null,
    "escapedName": "draftlog",
    "name": "draftlog",
    "rawSpec": "^1.0.10",
    "spec": ">=1.0.10 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/vux-loader"
  ],
  "_resolved": "http://registry.npm.taobao.org/draftlog/download/draftlog-1.0.12.tgz",
  "_shasum": "7db6a3c5b62106bb32dd4a35d67bcccb6c7d9da0",
  "_shrinkwrap": null,
  "_spec": "draftlog@^1.0.10",
  "_where": "/Users/Jeff_Deng/work/ysg-project/node_modules/vux-loader",
  "author": {
    "name": "Ivan Seidel Gomes"
  },
  "bugs": {
    "url": "https://github.com/ivanseidel/node-draftlog/issues"
  },
  "dependencies": {},
  "description": "Create updatable log lines into the terminal, and give life to your logs!",
  "devDependencies": {
    "chalk": "^1.1.3"
  },
  "directories": {},
  "dist": {
    "shasum": "7db6a3c5b62106bb32dd4a35d67bcccb6c7d9da0",
    "size": 6561,
    "noattachment": false,
    "tarball": "http://registry.npm.taobao.org/draftlog/download/draftlog-1.0.12.tgz"
  },
  "gitHead": "36a33b6cb357227e1ae7f21a17ee5d9a27a88799",
  "homepage": "https://github.com/ivanseidel/node-draftlog#readme",
  "keywords": [
    "logging",
    "console",
    "log",
    "terminal",
    "logger",
    "ui",
    "post",
    "after"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "ivanseidel",
      "email": "ivanseidel@gmail.com"
    }
  ],
  "name": "draftlog",
  "optionalDependencies": {},
  "publish_time": 1489512960399,
  "readme": "![DraftLog](midia/draftlog.png)\n<!-- [![NPM][npm-image]][npm-url] -->\n\n[![Build Status][build-status-image]][build-status-url] [![Dependency Status][dependencies-image]][dependencies-url]\n\nBecause Logging can be pretty and fun\n\n![DraftLog GIF](midia/draftlog.gif)\n\n[build-status-image]: https://img.shields.io/travis/ivanseidel/node-draftlog.svg\n[build-status-url]: http://travis-ci.org/ivanseidel/node-draftlog\n[dependencies-image]: https://gemnasium.com/badges/github.com/ivanseidel/node-draftlog.svg\n[dependencies-url]: https://gemnasium.com/github.com/ivanseidel/node-draftlog\n[npm-image]: https://nodei.co/npm/draftlog.png?downloads=true&stars=true\n[npm-url]: https://nodei.co/npm/draftlog\n\n## Installation\n\n```\n$ npm install draftlog\n```\n\n## What it does\n\nIt allows you to re-write a line of your log after being written. Just like post 'updating'. \nThis is the building block for any dynamic element such as `progress bars`, `loading status`, \n`animations`, `checkboxes` and so on.\n\nIt does that by keeping track of the current lines of code written thorugh the `stream`, and\nmoving the cursor up to the line of the `LogDraft` you created previously, and updating it's content.\n\nLook in the examples folders to see how easy it is, to create anything. No strict and fixed\nwidgets are given to you. Instead, use your creativity with this tool to create anything you\nwant! Share the results later with an example ;)\n\nLooking for CUTE Unicode chars? Check out [Unicute](https://github.com/ivanseidel/unicute).\n\nHow the\n[HECK](http://ascii-table.com/ansi-escape-sequences-vt-100.php) is \n[that](https://en.wikipedia.org/wiki/ANSI_escape_code) even\n[possible](http://tldp.org/HOWTO/Bash-Prompt-HOWTO/x361.html)?\n\n## Usage\n\n```javascript\n// Setup\nconst DraftLog = require('draftlog')\nDraftLog(console)\n\n// Or, in a single line:\nrequire('draftlog').into(console)\n\n// Account for manual line breaks with:\nrequire('draftlog').into(console).addLineListener(process.stdin)\n```\n\nTo create a updatable log, use the `draft` method injected into the provided `console`:\n\n```javascript\n// Create a Draft log\nvar update = console.draft('Hy, my name is')\n\n// You can call logs after it\nconsole.log('Something else')\n\n// Use the received callback to update it as many times as you want\nupdate('Hy, my name is Ivan!')\n```\n\nHere is some interesting exemples:\n```javascript\n// Prints a clock incrementing one every second in the same line\nvar draft = console.draft()\nvar elapsed = 1\nsetInterval( () => {\n  draft('Elapsed', elapsed++, 'seconds')\n}, 1000)\n\nconsole.log('It doesn`t matter')\nconsole.log('How \\n many \\n lines \\n ituses')\n```\n\nOr maybe, to show an flow process?\n```javascript\nfunction someAsyncFunction(){ \n  var TAG = '[someAsyncFunction]'\n  var log = console.draft(TAG, 'init')\n\n  function a() {\n    setTimeout(() => {\n      log(TAG, 'calling b')\n      b()\n    }, 500)\n  }\n\n  function b() {\n    setTimeout(() => {\n      log(TAG, 'finished')\n    })\n  }\n}\n```\n\nYou can create your own progress bar, just like \"that\":\n\n```javascript\nrequire('draftlog').into(console)\n\n// Input progess goes from 0 to 100\nfunction ProgressBar(progress) {\n  // Make it 50 characters length\n  var units = Math.round(progress / 2)\n  return '[' + '='.repeat(units) + ' '.repeat(50 - units) + '] ' + progress + '%'\n}\n\nvar barLine = console.draft('Starting download...')\ndownloadFile(function (progress) {\n  barLine(ProgressBar(progress))\n})\n\n// Will show something like: (being updated in realtime)\n// [============================                      ] 56%\n```\n\n## Learn from examples!\n\nWe have a few of them ready for you to use! Take a look at [the examples folder](examples/).\nRemember to replace `require('../')` with `require('draftlog')`.\n\nAlso, install [`chalk`](https://github.com/chalk/chalk) to get colors on your terminal ;)\n\n## Important things to know\n\nBecause of the way Terminals are built, it is not possible to update a text outside the viewing area of the terminal.\n\nThat said, DraftLogs are setup to automagically be rewritten on a new line if they reach the end of the viewport.\nNote that, you can disable that behavior, by setting `DraftLog.defaults.canReWrite = false`\n\nAlso, if the NodeJS environment cannot detect the number of rows of your terminal automatically, it will use\nthe default height on `DraftLog.defaults.maximumLinesUp`. Modify that if needed.\n\nWhen using `into(console).addLineListener(process.stdin)`, your code will no more exit\nautomatically because the stream is being \"read\". To stop your own code, you can call\n`process.exit(0)` or pause the stream when you want with: `process.stdin.pause()`.\n\n## Discouragements\n\nThis library is awesome for development, `cli` tools and what ever you want to created, that is NOT an\noptmized \"slave\" server. Please, disable it passing `true` as a seccond parameter to the DraftLog initialization:\n\n```javascript\n// Disable Initialization (true = production; false = development)\nDraftLog(console, true)\n// Or, with one line require-init:\nrequire('draftlog').into(console, true)\n```\n\n### Creator\n[Ivan Seidel](https://github.com/ivanseidel)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/ivanseidel/node-draftlog.git"
  },
  "scripts": {
    "test": "node tests"
  },
  "version": "1.0.12"
}
