{
  "_args": [
    [
      {
        "raw": "webpack-merge@^1.1.2",
        "scope": null,
        "escapedName": "webpack-merge",
        "name": "webpack-merge",
        "rawSpec": "^1.1.2",
        "spec": ">=1.1.2 <2.0.0",
        "type": "range"
      },
      "/Users/Jeff_Deng/work/ysg-project/node_modules/vux-loader"
    ]
  ],
  "_cnpm_publish_time": 1482069382259,
  "_from": "webpack-merge@^1.1.2",
  "_hasShrinkwrap": false,
  "_id": "webpack-merge@1.1.2",
  "_location": "/vux-loader/webpack-merge",
  "_nodeVersion": "6.9.1",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/webpack-merge-1.1.2.tgz_1482069379962_0.7402574168518186"
  },
  "_npmUser": {
    "name": "bebraw",
    "email": "bebraw@gmail.com"
  },
  "_npmVersion": "3.10.8",
  "_phantomChildren": {},
  "_requested": {
    "raw": "webpack-merge@^1.1.2",
    "scope": null,
    "escapedName": "webpack-merge",
    "name": "webpack-merge",
    "rawSpec": "^1.1.2",
    "spec": ">=1.1.2 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/vux-loader"
  ],
  "_resolved": "http://registry.npm.taobao.org/webpack-merge/download/webpack-merge-1.1.2.tgz",
  "_shasum": "49f2a68ba5fd34bb13c338c184c7028d93843432",
  "_shrinkwrap": null,
  "_spec": "webpack-merge@^1.1.2",
  "_where": "/Users/Jeff_Deng/work/ysg-project/node_modules/vux-loader",
  "author": {
    "name": "Juho Vepsalainen",
    "email": "bebraw@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/survivejs/webpack-merge/issues"
  },
  "dependencies": {
    "lodash.clonedeep": "^4.5.0",
    "lodash.differencewith": "^4.5.0",
    "lodash.isequal": "^4.4.0",
    "lodash.isfunction": "^3.0.8",
    "lodash.isplainobject": "^4.0.6",
    "lodash.mergewith": "^4.6.0",
    "lodash.unionwith": "^4.6.0"
  },
  "description": "Variant of merge that's useful for Webpack configuration",
  "devDependencies": {
    "babel-cli": "^6.3.17",
    "babel-preset-es2015": "^6.3.13",
    "eslint": "^3.12.0",
    "eslint-config-airbnb": "^13.0.0",
    "eslint-plugin-import": "^2.2.0",
    "eslint-plugin-jsx-a11y": "^2.2.3",
    "eslint-plugin-react": "^6.8.0",
    "git-prepush-hook": "^1.0.1",
    "mocha": "^3.2.0",
    "npm-watch": "^0.1.6"
  },
  "directories": {},
  "dist": {
    "shasum": "49f2a68ba5fd34bb13c338c184c7028d93843432",
    "size": 7781,
    "noattachment": false,
    "tarball": "http://registry.npm.taobao.org/webpack-merge/download/webpack-merge-1.1.2.tgz"
  },
  "files": [
    "lib"
  ],
  "gitHead": "d6597cc46cc9e722fa3dd72f9196be4d8760a232",
  "homepage": "https://github.com/survivejs/webpack-merge",
  "keywords": [
    "webpack",
    "merge"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "bebraw",
      "email": "bebraw@gmail.com"
    }
  ],
  "name": "webpack-merge",
  "optionalDependencies": {},
  "pre-push": [
    "test:lint",
    "build",
    "test"
  ],
  "publish_time": 1482069382259,
  "readme": "[![build status](https://secure.travis-ci.org/survivejs/webpack-merge.svg)](http://travis-ci.org/survivejs/webpack-merge)\n# webpack-merge - Merge designed for Webpack\n\n**webpack-merge** provides a `merge` function that concatenates arrays and merges objects creating a new object. If functions are encountered, it will execute them, run the results through the algorithm, and then wrap the returned values within a function again.\n\nThis behavior is particularly useful in configuring webpack although it has uses beyond it. Whenever you need to merge configuration objects, **webpack-merge** can come in handy.\n\nThere's also a webpack specific merge variant known as `merge.smart` that's able to take webpack specifics into account (i.e., it can flatten loader definitions).\n\n## API\n\n```javascript\n// Default API\nvar output = merge(object1, object2, object3, ...);\n\n// You can pass an array of objects directly.\n// This works with all available functions.\nvar output = merge([object1, object2, object3]);\n\n// Customizing array/object behavior\nvar output = merge({\n  customizeArray(a, b, key) { return [...a, ...b]; },\n  customizeObject(a, b, key) { return mergeWith(a, b); }\n})(object1, object2, object3, ...);\n\n// Smarter merging for loaders, see below\nvar output = merge.smart(object1, object2, object3, ...);\n\n// Merging with a specific merge strategy\nvar output = merge.strategy({\n  entry: 'prepend', // or 'replace'\n  'module.loaders': 'prepend'\n})(object1, object2, object3, ...);\n\n// The same idea works with smart merging too\nvar output = merge.smartStrategy({\n  entry: 'prepend', // or 'replace'\n  'module.loaders': 'prepend'\n})(object1, object2, object3, ...);\n```\n\n> Check out [SurviveJS - Webpack and React](http://survivejs.com/) to dig deeper into the topic.\n\n## Example\n\n**package.json**\n\n```json\n{\n  \"scripts\": {\n    \"start\": \"webpack-dev-server\",\n    \"build\": \"webpack\"\n  },\n  ...\n}\n```\n\n**webpack.config.js**\n\n```javascript\nvar path = require('path');\nvar merge = require('webpack-merge');\n\nvar TARGET = process.env.npm_lifecycle_event;\n\nvar common = {\n  entry: path.join(__dirname, 'app'),\n  ...\n  module: {\n    loaders: [\n      {\n        test: /\\.css$/,\n        loaders: ['style', 'css'],\n      },\n    ],\n  },\n};\n\nif(TARGET === 'start') {\n  module.exports = merge(common, {\n    module: {\n      // loaders will get concatenated!\n      loaders: [\n        {\n          test: /\\.jsx?$/,\n          loader: 'babel?stage=1',\n          include: path.join(ROOT_PATH, 'app'),\n        },\n      ],\n    },\n    ...\n  });\n}\n\nif(TARGET === 'build') {\n  module.exports = merge(common, {\n    ...\n  });\n}\n\n...\n```\n\n### Empty Arrays and Objects Override\n\nYou can override existing arrays/objects like this:\n\n```javascript\nvar common = {\n  entry: [APP_PATH, STYLE_PATH]\n  ...\n};\n\nif(TARGET === 'test') {\n  module.exports = merge(common, {\n    entry: [], // empty now\n    ...\n  });\n}\n```\n\n## Smart Merging of Loaders\n\nWebpack-merge tries to be smart about merging loaders when `merge.smart` is used. Loaders with matching tests will be merged into a single loader value.\n\nNote that the logic picks up webpack 2 `rules` kind of syntax as well. The examples below have been written in webpack 1 syntax.\n\n**Loader string values `loader: 'babel'` override each other.**\n\n```javascript\nmerge.smart({\n  loaders: [{\n    test: /\\.js$/,\n    loader: 'babel'\n  }]\n}, {\n  loaders: [{\n    test: /\\.js$/,\n    loader: 'coffee'\n  }]\n});\n// will become\n{\n  loaders: [{\n    test: /\\.js$/,\n    loader: 'coffee'\n  }]\n}\n```\n\n**Loader array values `loaders: ['babel']` will be merged, without duplication.**\n\n```javascript\nmerge.smart({\n  loaders: [{\n    test: /\\.js$/,\n    loaders: ['babel']\n  }]\n}, {\n  loaders: [{\n    test: /\\.js$/,\n    loaders: ['coffee']\n  }]\n});\n// will become\n{\n  loaders: [{\n    test: /\\.js$/,\n    // appended because Webpack evaluated these from right to left\n    // this way you can specialize behavior and build the loader chain\n    loaders: ['babel', 'coffee']\n  }]\n}\n```\n\n**Loader query strings `loaders: ['babel?plugins[]=object-assign']` will be overridden**\n\n```javascript\nmerge.smart({\n  loaders: [{\n    test: /\\.js$/,\n    loaders: ['babel?plugins[]=object-assign']\n  }]\n}, {\n  loaders: [{\n    test: /\\.js$/,\n    loaders: ['babel', 'coffee']\n  }]\n});\n// will become\n{\n  loaders: [{\n    test: /\\.js$/,\n    loaders: ['babel', 'coffee']\n  }]\n}\n```\n\n**Loader arrays in source values will have loader strings merged into them.**\n\n```javascript\nmerge.smart({\n  loaders: [{\n    test: /\\.js$/,\n    loader: 'babel'\n  }]\n}, {\n  loaders: [{\n    test: /\\.js$/,\n    loaders: ['coffee']\n  }]\n});\n// will become\n{\n  loaders: [{\n    test: /\\.js$/,\n    // appended because Webpack evaluated these from right to left!\n    loaders: ['babel', 'coffee']\n  }]\n}\n```\n\n**Loader strings in source values will always override.**\n\n```javascript\nmerge.smart({\n  loaders: [{\n    test: /\\.js$/,\n    loaders: ['babel']\n  }]\n}, {\n  loaders: [{\n    test: /\\.js$/,\n    loader: 'coffee'\n  }]\n});\n// will become\n{\n  loaders: [{\n    test: /\\.js$/,\n    loader: 'coffee'\n  }]\n}\n```\n\n## Development\n\n1. `npm i`\n2. `npm run watch`\n\nBefore contributing, please open an issue where to discuss.\n\n## License\n\n*webpack-merge* is available under MIT. See LICENSE for more details.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/survivejs/webpack-merge.git"
  },
  "scripts": {
    "build": "babel src -d lib",
    "preversion": "npm run test:lint && npm run build && npm test && git commit --allow-empty -am \"Update lib\"",
    "test": "mocha tests/test-*",
    "test:lint": "eslint . ---cache",
    "watch": "npm-watch"
  },
  "version": "1.1.2",
  "watch": {
    "build": {
      "patterns": [
        "src/**/*.js"
      ]
    },
    "test": {
      "patterns": [
        "src/**/*.js",
        "tests/**/*.js"
      ]
    },
    "test:lint": {
      "patterns": [
        "src/**/*.js",
        "tests/**/*.js"
      ]
    }
  }
}
